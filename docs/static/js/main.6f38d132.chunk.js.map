{"version":3,"sources":["App/components/ToyCar/ari_lybaert_toy.glb","App/components/GlTransmissionFormat/glTF.glb","App/components/Clock/index.js","App/components/Lighting/index.js","App/components/Lighting/indexGui.js","App/components/Lighting/Studio.js","App/components/Lighting/StudioGui.js","App/components/Lighting/ThreePoint.js","App/components/Lighting/ThreePointGui.js","App/components/Tripod/index.js","App/components/ToyCar/index.js","App/components/Floor/index.js","App/Content.js","App/index.js","index.js","App/components/Suzanne/suzanne.glb"],"names":["module","exports","intensity","castShadow","color","position","directionalLightRef","useResource","pointLightRef","spotLightRef","spotLightHelperRef","useRef","scene","useThree","target","THREE","add","showLightHelpers","useControl","group","type","value","ambientLightIntensity","min","max","directionalLightColor","directionalLightIntensity","pointLightColor","pointLightIntensity","pointLightPosition","distance","x","y","spotLightColor","spotLightIntensity","spotLightPosition","useFrame","translateX","translateZ","current","update","ref","penumbra","angle","degToRad","args","frontLightRef","leftLightRef","rightLightRef","ambientLightColor","frontLightColor","frontLightIntensity","leftLightColor","leftLightIntensity","rightLightColor","rightLightIntensity","backLightRef","fillLightRef","keyLightRef","backLightColor","backLightIntensity","fillLightColor","fillLightIntensity","keyLightColor","keyLightIntensity","props","map","length","Array","fill","index","v","i","light","useState","clockwise","setClockwise","useGLTF","logo","materials","nodes","gltf","logoRef","console","log","useEffect","children","material","object","onClick","receiveShadow","rotation","attach","components","lightings","showEffect","showStats","useComponent","items","useLighting","showAxesHelper","showGridHelper","carlightSwitch","showLighting","name","enablePan","enableRotate","enableZoom","height","luminanceThreshold","luminanceSmoothing","Lighting","fallback","ToyCar","Floor","Tripod","invalidateFrameloop","shadowMap","Content","title","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.6f38d132.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ari_lybaert_toy.8cf117b7.glb\";","module.exports = __webpack_public_path__ + \"static/media/glTF.ce019e05.glb\";","import React, { useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Text } from \"@react-three/drei\";\nimport { MathCircle } from \"App/utils\";\n\nfunction isHour(tick) {\n  return !(tick % 5);\n}\n\n/**\n * Clock using standard react-three-fiber jsx\n */\nexport default (props) => {\n  const HH = 12;\n  const MM = 60;\n  const SS = 60;\n\n  const CLOCK_SIZE = 1;\n\n  const HAND_THICKNESS = 0.02;\n  const HAND_HH_LENGTH = 0.6;\n  const HAND_MM_LENGTH = 0.7;\n  const HAND_SS_COLOR = 0xffcc66;\n  const HAND_SS_LENGTH = 0.8;\n\n  const MARK_HH_COLOR = 0xff0000;\n  const MARK_HH_LENGTH = 0.1;\n  const MARK_HH_WIDTH = 0.02;\n  const MARK_MM_COLOR = 0xffffff;\n  const MARK_MM_LENGTH = 0.08;\n  const MARK_MM_WIDTH = 0.01;\n  const MARK_OFFSET = 0.05;\n\n  const CLOCK = useRef();\n  const HAND_HH = useRef();\n  const HAND_MM = useRef();\n  const HAND_SS = useRef();\n\n  const angleStart = THREE.MathUtils.degToRad(90);\n\n  useFrame(() => {\n    const d = new Date();\n    HAND_HH.current.rotation.z = THREE.MathUtils.degToRad(\n      (d.getHours() + d.getMinutes() / MM) * -(360 / HH)\n    );\n    HAND_MM.current.rotation.z = THREE.MathUtils.degToRad(\n      d.getMinutes() * -(360 / MM)\n    );\n    HAND_SS.current.rotation.z = THREE.MathUtils.degToRad(\n      d.getSeconds() * -(360 / SS)\n    );\n  });\n\n  return (\n    <group ref={CLOCK} {...props}>\n      {/* <axesHelper /> */}\n      <group>\n        <Text color=\"black\" position={[0, -0.25, 0.01]}>\n          Arteveldehogeschool\n        </Text>\n        {Array(HH)\n          .fill(null)\n          .map((value, index) => {\n            const c = new MathCircle(CLOCK_SIZE - MARK_HH_LENGTH * 2.5);\n            const angle = index * (360 / HH) + 90;\n            const { x, y } = c.getCoordinates(angle);\n            return (\n              <Text\n                color={HAND_SS_COLOR}\n                position={[x, y, 0.01]}\n                scale={[1.2, 1.2, 1]}\n              >\n                {(12 - index).toString()}\n              </Text>\n            );\n          })}\n      </group>\n      <group rotation={[0, 0, angleStart]}>\n        <mesh receiveShadow={true}>\n          <circleBufferGeometry args={[CLOCK_SIZE, MM]} />\n          <meshStandardMaterial opacity={0.25} transparent={true} />\n        </mesh>\n        <group position={[0, 0, HAND_THICKNESS / 2]}>\n          <group position={[0, 0, HAND_THICKNESS / 2]} ref={HAND_HH}>\n            <mesh castShadow={true} position={[HAND_HH_LENGTH / 2, 0, 0]}>\n              <boxBufferGeometry\n                args={[HAND_HH_LENGTH, 0.06, HAND_THICKNESS]}\n              />\n              <meshStandardMaterial />\n            </mesh>\n          </group>\n          <group position={[0, 0, HAND_THICKNESS * 2]} ref={HAND_MM}>\n            <mesh castShadow={true} position={[HAND_MM_LENGTH / 2, 0, 0]}>\n              <boxBufferGeometry\n                args={[HAND_MM_LENGTH, 0.04, HAND_THICKNESS]}\n              />\n              <meshStandardMaterial />\n            </mesh>\n          </group>\n          <group\n            position={[0, 0, HAND_THICKNESS * 3 + HAND_THICKNESS / 2]}\n            ref={HAND_SS}\n          >\n            <mesh castShadow={true} position={[HAND_SS_LENGTH / 2, 0, 0]}>\n              <boxBufferGeometry\n                args={[HAND_SS_LENGTH, 0.02, HAND_THICKNESS]}\n              />\n              <meshStandardMaterial color={HAND_SS_COLOR} />\n            </mesh>\n          </group>\n        </group>\n        {Array(MM)\n          .fill(null)\n          .map((value, index) => {\n            const radians = THREE.MathUtils.degToRad((360 / MM) * index);\n\n            return (\n              <group\n                key={index}\n                rotation={[0, 0, radians]}\n                position={[0, 0, 0.005]}\n              >\n                <mesh\n                  position={[\n                    CLOCK_SIZE -\n                      MARK_OFFSET -\n                      (isHour(index) ? MARK_HH_LENGTH - 0.01 : MARK_MM_LENGTH) /\n                        2,\n                    0,\n                    0,\n                  ]}\n                >\n                  <boxBufferGeometry\n                    args={[\n                      isHour(index) ? MARK_HH_LENGTH : MARK_MM_LENGTH,\n                      isHour(index) ? MARK_HH_WIDTH : MARK_MM_WIDTH,\n                      0.01,\n                    ]}\n                  />\n                  <meshStandardMaterial\n                    color={\n                      index === 0\n                        ? 0x0000ff\n                        : isHour(index)\n                        ? MARK_HH_COLOR\n                        : MARK_MM_COLOR\n                    }\n                  />\n                </mesh>\n              </group>\n            );\n          })}\n        <mesh\n          castShadow={true}\n          rotation={[-90, 0, 0].map((degrees) =>\n            THREE.MathUtils.degToRad(degrees)\n          )}\n          position={[0, 0, 0.05]}\n        >\n          <cylinderBufferGeometry args={[0.1, 0.05, HAND_THICKNESS * 5, 36]} />\n          <meshStandardMaterial />\n        </mesh>\n      </group>\n    </group>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <>\n      <ambientLight intensity={0.1} />\n      <directionalLight\n        castShadow={true}\n        color={0xffffff}\n        intensity={1}\n        position={[2, 2, 1]}\n      />\n      <hemisphereLight />\n      <pointLight\n        castShadow={true}\n        color={0xff6600}\n        intensity={0.5}\n        position={[0, 0, 4]}\n      />\n      <spotLight\n        castShadow={true}\n        color={0xfff000}\n        position={[0, 4, 4]}\n        intensity={1}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { useFrame, useResource, useThree } from \"react-three-fiber\";\nimport { useControl } from \"react-three-gui\";\n\nexport default () => {\n  const directionalLightRef = useResource();\n  // const hemisphereLightRef = useResource();\n  const pointLightRef = useResource();\n  const spotLightRef = useResource();\n  const spotLightHelperRef = useRef();\n  const { scene } = useThree();\n  const target = new THREE.Object3D();\n\n  scene.add(target);\n\n  const helperSize = 0.5;\n  const showLightHelpers = useControl(\"Light helpers\", {\n    group: \"Helpers\",\n    type: \"boolean\",\n    value: true,\n  });\n  const ambientLightColor = useControl(\"Color\", {\n    group: \"Ambient Light\",\n    type: \"color\",\n    value: \"#ffffff\",\n  });\n  const ambientLightIntensity = useControl(\"Intensity\", {\n    group: \"Ambient Light\",\n    type: \"number\",\n    value: 0.1,\n    min: 0,\n    max: 1,\n  });\n  const directionalLightColor = useControl(\"Color\", {\n    group: \"Directional Light\",\n    type: \"color\",\n    value: \"#ffffff\",\n  });\n  const directionalLightIntensity = useControl(\"Intensity\", {\n    group: \"Directional Light\",\n    type: \"number\",\n    value: 1,\n    min: 0,\n    max: 1,\n  });\n  const pointLightColor = useControl(\"Color\", {\n    group: \"Point Light\",\n    type: \"color\",\n    value: \"#ffcc77\",\n  });\n  const pointLightIntensity = useControl(\"Intensity\", {\n    group: \"Point Light\",\n    type: \"number\",\n    value: 0.5,\n    min: 0,\n    max: 20,\n  });\n  const pointLightPosition = useControl(\"Position XZ\", {\n    group: \"Point Light\",\n    type: \"xypad\",\n    distance: 5,\n    value: { x: -4, y: -4 },\n  });\n  const spotLightColor = useControl(\"Color\", {\n    group: \"Spot Light\",\n    type: \"color\",\n    // value: \"#ffcc77\",\n  });\n  const spotLightIntensity = useControl(\"Intensity\", {\n    group: \"Spot Light\",\n    type: \"number\",\n    value: 1,\n    min: 0,\n    max: 20,\n  });\n  const spotLightPosition = useControl(\"Position XZ\", {\n    group: \"Spot Light\",\n    type: \"xypad\",\n    distance: 5,\n    value: { x: 0, y: 0 },\n  });\n\n  useFrame(() => {\n    target.translateX(spotLightPosition.x);\n    target.translateZ(spotLightPosition.y);\n    if (spotLightHelperRef.current) {\n      spotLightHelperRef.current.update();\n    }\n  });\n\n  return (\n    <>\n      <ambientLight intensity={ambientLightIntensity} />\n      <directionalLight\n        castShadow={true}\n        color={directionalLightColor}\n        intensity={directionalLightIntensity}\n        position={[4, 4, 1]}\n        ref={directionalLightRef}\n      />\n      {/* <hemisphereLight ref={hemisphereLightRef} /> */}\n      <pointLight\n        castShadow={true}\n        color={pointLightColor}\n        intensity={pointLightIntensity}\n        position={[pointLightPosition.x, 1, pointLightPosition.y]}\n        ref={pointLightRef}\n      />\n      <spotLight\n        castShadow={true}\n        color={spotLightColor}\n        position={[0, 4, 4]}\n        intensity={spotLightIntensity}\n        ref={spotLightRef}\n        target={target}\n        penumbra={0.5}\n        angle={THREE.MathUtils.degToRad(30)}\n      />\n      {showLightHelpers && (\n        <>\n          {directionalLightRef.current && (\n            <directionalLightHelper\n              args={[\n                directionalLightRef.current,\n                helperSize,\n                directionalLightColor,\n              ]}\n            />\n          )}\n          {/* {hemisphereLightRef.current && (\n            <hemisphereLightHelper\n              args={[hemisphereLightRef.current, helperSize]}\n            />\n          )} */}\n          {pointLightRef.current && (\n            <pointLightHelper\n              args={[pointLightRef.current, helperSize, pointLightColor]}\n            />\n          )}\n          {spotLightRef.current && (\n            <spotLightHelper\n              args={[spotLightRef.current, spotLightColor]}\n              ref={spotLightHelperRef}\n            />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.1} />\n      <directionalLight\n        castShadow={true}\n        color=\"hsl(0, 0%, 70%)\"\n        intensity={0.4}\n        position={[0, 2, 4]}\n      />\n      <directionalLight\n        castShadow={true}\n        color=\"hsl(210, 100%, 70%)\"\n        position={[-4, 0, 0]}\n      />\n      <directionalLight\n        castShadow={true}\n        color=\"hsl(30, 100%, 70%)\"\n        position={[4, 0, 0]}\n      />\n      s\n    </group>\n  );\n};\n","import React from \"react\";\nimport { useResource } from \"react-three-fiber\";\nimport { useControl } from \"react-three-gui\";\n\nexport default () => {\n  const frontLightRef = useResource();\n  const leftLightRef = useResource();\n  const rightLightRef = useResource();\n\n  const helperSize = 0.5;\n  const showLightHelpers = useControl(\"Light helpers\", {\n    group: \"Helpers\",\n    type: \"boolean\",\n    value: true,\n  });\n  const ambientLightColor = useControl(\"Color\", {\n    group: \"Ambient Light\",\n    type: \"color\",\n    value: \"hsl(0, 0%, 100%)\",\n  });\n  const ambientLightIntensity = useControl(\"Intensity\", {\n    group: \"Ambient Light\",\n    type: \"number\",\n    value: 0.1,\n    min: 0,\n    max: 1,\n  });\n  const frontLightColor = useControl(\"Color\", {\n    group: \"Front Light\",\n    type: \"color\",\n    value: \"hsl(0, 0%, 70%)\",\n  });\n  const frontLightIntensity = useControl(\"Intensity\", {\n    group: \"Front Light\",\n    type: \"number\",\n    value: 0.4,\n    min: 0,\n    max: 2,\n  });\n  const leftLightColor = useControl(\"Color\", {\n    group: \"Left Light\",\n    type: \"color\",\n    value: \"hsl(210, 100%, 70%)\",\n  });\n  const leftLightIntensity = useControl(\"Intensity\", {\n    group: \"Left Light\",\n    type: \"number\",\n    value: 1,\n    min: 0,\n    max: 2,\n  });\n  const rightLightColor = useControl(\"Color\", {\n    group: \"Right Light\",\n    type: \"color\",\n    value: \"hsl(30, 100%, 70%)\",\n  });\n  const rightLightIntensity = useControl(\"Intensity\", {\n    group: \"Right Light\",\n    type: \"number\",\n    value: 1,\n    min: 0,\n    max: 2,\n  });\n\n  return (\n    <group>\n      <ambientLight\n        color={ambientLightColor}\n        intensity={ambientLightIntensity}\n      />\n      <directionalLight\n        castShadow={true}\n        color={frontLightColor}\n        intensity={frontLightIntensity}\n        position={[0, 2, 4]}\n        ref={frontLightRef}\n      />\n      <directionalLight\n        castShadow={true}\n        color={leftLightColor}\n        intensity={leftLightIntensity}\n        position={[-4, 0, 0]}\n        ref={leftLightRef}\n      />\n      <directionalLight\n        castShadow={true}\n        color={rightLightColor}\n        intensity={rightLightIntensity}\n        position={[4, 0, 0]}\n        ref={rightLightRef}\n      />\n      {showLightHelpers && (\n        <>\n          {frontLightRef.current && (\n            <directionalLightHelper\n              args={[frontLightRef.current, helperSize, frontLightColor]}\n            />\n          )}\n          {leftLightRef.current && (\n            <directionalLightHelper\n              args={[leftLightRef.current, helperSize, leftLightColor]}\n            />\n          )}\n          {rightLightRef.current && (\n            <directionalLightHelper\n              args={[rightLightRef.current, helperSize, rightLightColor]}\n            />\n          )}\n        </>\n      )}\n    </group>\n  );\n};\n","import React from \"react\";\n\nexport default () => {\n  return (\n    <group>\n      <ambientLight intensity={0.1} />\n      <spotLight\n        castShadow={true}\n        color=\"hsl(0, 0%, 70%)\"\n        position={[4, 2, -4]}\n      />\n      <spotLight\n        castShadow={true}\n        color=\"hsl(210, 100%, 70%)\"\n        position={[-4, 2, 4]}\n      />\n      <spotLight\n        castShadow={true}\n        color=\"hsl(30, 100%, 70%)\"\n        position={[4, 2, 4]}\n      />\n    </group>\n  );\n};\n","import React from \"react\";\nimport { useResource } from \"react-three-fiber\";\nimport { useControl } from \"react-three-gui\";\n\nexport default () => {\n  const backLightRef = useResource();\n  const fillLightRef = useResource();\n  const keyLightRef = useResource();\n\n  const showLightHelpers = useControl(\"Light helpers\", {\n    group: \"Helpers\",\n    type: \"boolean\",\n    value: true,\n  });\n  const ambientLightColor = useControl(\"Color\", {\n    group: \"Ambient Light\",\n    type: \"color\",\n    value: \"hsl(0, 0%, 100%)\",\n  });\n  const ambientLightIntensity = useControl(\"Intensity\", {\n    group: \"Ambient Light\",\n    type: \"number\",\n    value: 0.1,\n    min: 0,\n    max: 1,\n  });\n  const backLightColor = useControl(\"Color\", {\n    group: \"Back Light\",\n    type: \"color\",\n    value: \"hsl(0, 0%, 70%)\",\n  });\n  const backLightIntensity = useControl(\"Intensity\", {\n    group: \"Back Light\",\n    type: \"number\",\n    value: 1,\n    min: 0,\n    max: 2,\n  });\n  const fillLightColor = useControl(\"Color\", {\n    group: \"Fill Light\",\n    type: \"color\",\n    value: \"hsl(210, 100%, 70%)\",\n  });\n  const fillLightIntensity = useControl(\"Intensity\", {\n    group: \"Fill Light\",\n    type: \"number\",\n    value: 0.75,\n    min: 0,\n    max: 2,\n  });\n  const keyLightColor = useControl(\"Color\", {\n    group: \"Key Light\",\n    type: \"color\",\n    value: \"hsl(30, 100%, 70%)\",\n  });\n  const keyLightIntensity = useControl(\"Intensity\", {\n    group: \"Key Light\",\n    type: \"number\",\n    value: 1,\n    min: 0,\n    max: 2,\n  });\n\n  return (\n    <group>\n      <ambientLight\n        color={ambientLightColor}\n        intensity={ambientLightIntensity}\n      />\n      <spotLight\n        castShadow={true}\n        color={backLightColor}\n        intensity={backLightIntensity}\n        position={[4, 2, -4]}\n        ref={backLightRef}\n      />\n      <spotLight\n        castShadow={true}\n        color={fillLightColor}\n        intensity={fillLightIntensity}\n        position={[-4, 2, 4]}\n        ref={fillLightRef}\n      />\n      <spotLight\n        castShadow={true}\n        color={keyLightColor}\n        intensity={keyLightIntensity}\n        position={[4, 2, 4]}\n        ref={keyLightRef}\n      />\n      {showLightHelpers && (\n        <>\n          {backLightRef.current && (\n            <spotLightHelper args={[backLightRef.current, backLightColor]} />\n          )}\n\n          {fillLightRef.current && (\n            <spotLightHelper args={[fillLightRef.current, fillLightColor]} />\n          )}\n          {keyLightRef.current && (\n            <spotLightHelper args={[keyLightRef.current, keyLightColor]} />\n          )}\n        </>\n      )}\n    </group>\n  );\n};\n","import React from \"react\";\n\nexport default (props) => {\n  const length = 1;\n  const radius = (length / 100) * 2;\n  const segments = 32;\n  const thickness = length / 100;\n\n  return (\n    <group {...props}>\n      <mesh>\n        <boxBufferGeometry\n          args={[1, 1, 1].map((value) => value * 1.5 * thickness)}\n        />\n        <meshMatcapMaterial color={0xffffff} />\n      </mesh>\n\n      {Array(3)\n        .fill(null)\n        .map((value, index) => {\n          return (\n            <group\n              position={[0, 0, 0].map((v, i) =>\n                index === i ? length / 2 + thickness * 2 : v\n              )}\n            >\n              <mesh>\n                <boxBufferGeometry\n                  args={[1, 1, 1].map(\n                    (v, i) => v * (index === i ? length : thickness)\n                  )}\n                />\n                <meshMatcapMaterial color={0xff0000 >> (8 * index)} />\n              </mesh>\n              <mesh\n                position={[0, 0, 0].map((v, i) =>\n                  index === i ? length / 2 + thickness * 3 : v\n                )}\n              >\n                <sphereBufferGeometry args={[radius, segments, segments]} />\n                <meshMatcapMaterial color={0xffffff} />\n              </mesh>\n            </group>\n          );\n        })}\n    </group>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { useControl } from \"react-three-gui\";\nimport logo from \"./ari_lybaert_toy.glb\";\n\nexport default ({light}) => {\n  const [clockwise, setClockwise] = useState(false);\n  const { nodes, materials } = useGLTF(logo, true);\n\n\n  const gltf = useGLTF(logo, true);\n  const logoRef = useRef();\n  const speed = 0.025;\n\n  // logs\n  //console.log(\"nodes:\", nodes);\n  console.log(\"materials:\", materials);\n  // console.log(gltf.scene);\n\n\n\n  useEffect(() => {\n    if(light == true) {\n      gltf.scene.children[5].children[5].material = materials[\"taillight\"];\n      gltf.scene.children[5].children[3].material = materials[\"headlight\"];\n      console.log(\"light on\");\n\n    } else {\n      gltf.scene.children[5].children[5].material = materials[\"grey\"];\n      gltf.scene.children[5].children[3].material = materials[\"base\"];\n      console.log(\"light off\");\n\n    }\n  }, [light])\n\n  useFrame(() => {\n    // logoRef.current.rotation.x += speed * (clockwise ? 1 : -1);\n    // logoRef.current.rotation.y += speed * (clockwise ? 1 : -1);\n    // logoRef.current.rotation.z += speed * (clockwise ? 1 : -1);\n  });\n\n  return (\n    <primitive\n      object={gltf.scene}\n      onClick={() => setClockwise(!clockwise)}\n      position={[0, 0, 0]}\n      ref={logoRef}\n    />\n  );\n};\n","import React from 'react';\n\nexport default () => {\n\n    return (\n        <mesh receiveShadow rotation={[4.7, 0, 0]} position={[0, -1.20, 0]}>\n            <planeBufferGeometry attach=\"geometry\" args={[1500, 1500]}/>\n            <meshStandardMaterial attach=\"material\" color=\"gray\" />\n        </mesh>\n    )\n}","import React, { Suspense } from \"react\";\nimport * as THREE from \"three\";\nimport { useControl } from \"react-three-gui\";\nimport { OrbitControls, Stats } from \"@react-three/drei\";\nimport { Bloom, EffectComposer } from \"@react-three/postprocessing\";\nimport {\n  Button,\n  ButtonSpring,\n  Clock,\n  Cube,\n  Face,\n  Gauge,\n  GlTransmissionFormat,\n  Lighting,\n  LightingGui,\n  LightingStudio,\n  LightingStudioGui,\n  LightingThreePoint,\n  LightingThreePointGui,\n  Spring,\n  SpringProps,\n  Suzanne,\n  SuzanneMatcapTexture,\n  SuzanneNormalTexture,\n  SuzanneStandardMaterial,\n  SuzanneToonMaterial,\n  Tripod,\n  ToyCar,\n  Floor\n} from \"App/components\";\n\nexport default () => {\n  const components = [\n    \"None\",\n    \"Button\",\n    \"Button (React Spring)\",\n    \"Clock\",\n    \"Cube\",\n    \"Cube (positioned)\",\n    \"Face\",\n    \"Gauge\",\n    \"GlTransmissionFormat\",\n    \"Spring\",\n    \"Spring (Props)\",\n    \"Suzanne (default)\",\n    \"Suzanne (MatCap Texture)\",\n    \"Suzanne (Normal Texture)\",\n    \"Suzanne (Standard Material)\",\n    \"Suzanne (Toon Material)\",\n    \"Tripod\",\n  ];\n\n  const lightings = [\n    \"None\",\n    \"Demo\",\n    \"Demo + GUI\",\n    \"Studio Lighting\",\n    \"Studio Lighting + GUI\",\n    \"Three Point Lighting\",\n    \"Three Point Lighting + GUI\",\n  ];\n\n  const showEffect = useControl(\"Effect\", {\n    group: \"General\",\n    type: \"boolean\",\n    value: false,\n  });\n  const showStats = useControl(\"Statistics\", {\n    group: \"General\",\n    type: \"boolean\",\n    value: false,\n  });\n\n  const useComponent = useControl(\"Component\", {\n    group: \"General\",\n    type: \"select\",\n    value: components[14],\n    items: components,\n  });\n  const useLighting = useControl(\"Lighting\", {\n    group: \"General\",\n    type: \"select\",\n    value: lightings[3],\n    items: lightings,\n  });\n\n  const showAxesHelper = useControl(\"Axes Helper\", {\n    group: \"Helpers\",\n    type: \"boolean\",\n    value: false,\n  });\n  const showGridHelper = useControl(\"Grid Helper\", {\n    group: \"Helpers\",\n    type: \"boolean\",\n    value: false,\n  });\n\n\n  const carlightSwitch = useControl(\"Switch light\", { \n    type: \"boolean\", \n    value: true\n  });\n\n  function showLighting(name) {\n    return useLighting === name;\n  }\n\n  function showComponent(name) {\n    return useComponent === name;\n  }\n\n  return (\n    <>\n      <group>\n        {true && (\n          <OrbitControls\n            enablePan={true}\n            enableRotate={true}\n            enableZoom={true}\n          />\n        )}\n        {showStats && <Stats />}\n        {showAxesHelper && <axesHelper />}\n        {showGridHelper && <gridHelper args={[10, 10, 0xffffff, 0x333333]} />}\n      </group>\n      {showEffect && (\n        <EffectComposer>\n          <Bloom height={500} luminanceThreshold={0} luminanceSmoothing={0.9} />\n        </EffectComposer>\n      )}\n      {showLighting(\"Demo\") && <Lighting />}\n      {showLighting(\"Demo + GUI\") && <LightingGui />}\n      {showLighting(\"Studio Lighting\") && <LightingStudio />}\n      {showLighting(\"Studio Lighting + GUI\") && <LightingStudioGui />}\n      {showLighting(\"Three Point Lighting\") && <LightingThreePoint />}\n      {showLighting(\"Three Point Lighting + GUI\") && <LightingThreePointGui />}\n      {/* {showComponent(\"Button\") && <Button />}\n      {showComponent(\"Button (React Spring)\") && <ButtonSpring />}\n      {showComponent(\"Clock\") && <Clock />}\n      {showComponent(\"Cube\") && <Cube />}\n      {showComponent(\"Cube (positioned)\") && (\n        <Cube\n          position={[1, 1, 1]}\n          rotation={[45, 45, 45].map((degrees) =>\n            THREE.MathUtils.degToRad(degrees)\n          )}\n        />\n      )}\n      {showComponent(\"Face\") && <Face />}\n      {showComponent(\"Gauge\") && <Gauge />} */}\n      {true && (\n        <Suspense fallback={null}>\n          <ToyCar light={carlightSwitch}/>\n          <Floor/>\n          {/* {showComponent(\"GlTransmissionFormat\") && <GlTransmissionFormat />}\n          {showComponent(\"Spring\") && <Spring />}\n          {showComponent(\"Spring (Props)\") && <SpringProps />}\n          {showComponent(\"Suzanne (default)\") && <Suzanne />}\n          {showComponent(\"Suzanne (MatCap Texture)\") && (\n            <SuzanneMatcapTexture />\n          )}\n          {showComponent(\"Suzanne (Normal Texture)\") && (\n            <SuzanneNormalTexture />\n          )}\n          {showComponent(\"Suzanne (Standard Material)\") && (\n            <SuzanneStandardMaterial />\n          )}\n          {showComponent(\"Suzanne (Toon Material)\") && <SuzanneToonMaterial />} */}\n        </Suspense>\n      )}\n      {showComponent(\"Tripod\") && <Tripod />}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport { Controls, ControlsProvider } from \"react-three-gui\";\nimport Content from \"App/Content\";\n\nimport \"./styles.css\";\n\nexport default () => {\n  // const port = 3001;\n  // const socket = io(`http://localhost:${port}`);\n\n  // socket.on(\"connect\", () => {\n  //   console.log(\"Socket connected: \", socket.connected);\n  // });\n\n  // socket.on(\"disconnect\", () => {\n  //   console.log(\"Socket connected: \", socket.connected);\n  // });\n\n  // socket.on(\"telemetry\", (message) => {\n  //   console.log(\"Message:\", message);\n  // });\n\n  return (\n    <ControlsProvider>\n      <Canvas invalidateFrameloop={false} shadowMap>\n        <Content />\n      </Canvas>\n      <Controls title=\"Controls\" />\n    </ControlsProvider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/suzanne.fdd60495.glb\";"],"sourceRoot":""}